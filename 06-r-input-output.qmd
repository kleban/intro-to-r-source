---
title: "Введення-виведення даних"
author: "Юрій Клебан"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    highlight-style: github
    code-line-numbers: true
language: _language-ua.yml 
---

## Введення даних

Читання даних з консолі `R` можна здійснювати за допомогою функцій `scan()` та `readline()`.

`readline()` - читає рядок з консолі та записує його в змінну. Розглянемо приклад:

```{r, eval=FALSE}
text <- readline(prompt = "Text to ask user input: ") # prompt a text to view
```

Функція `scan()` зчитує дані з консолі та зберігає їх у векторі. Приклад використання у `RStudio Desktop`:

```output
 data <- scan() 1: 12 5 3: 2 4:
> z [1] 12 5 2
```
---

## Виведення даних

Для виведення даних у `RStudio` можна просто скористатися назвою змінної або використати функцію `print()`.

```{r}
x <- 5
y <- 10
print(x + y)
```

Ще однією корисною функцією є `cat()`. Вона використовується для виведення об'єктів, конкантенації тексту та значень змінних. Приклад:

```{r}
cat("Some text", 1, "more text")
```

У цьому посібнику часто використовуються також функції `paste()` та `paste0()` для конкантенації тексту та значень змінних перед виведенням. Синтаксис функції `paste()` настпуний `paste(..., sep = " ", collapse = NULL)`. Параметр `sep` визначає роздільник між елементами, а `collapse` - роздільник між рядками. Приклад:

```{r}
paste("file", "number", "32") # default separator is space " "
```

```{r}
paste("file", "number", "32", sep = "_") # separator underline "_"
```

Усі параметри перед сепаратором (`sep`) повинні бути розділені комами.

Функція `paste0(…, collapse = NULL)` працює так само, але не використовує сепаратор між елементами. Приклад:

```{r}
print(paste0("file", "number", "32"))
```






