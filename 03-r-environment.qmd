---
title: "Вcтановлення та налаштування R"
author: "Юрій Клебан"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    highlight-style: github
    code-line-numbers: true
language: _language-ua.yml 
---

`R` є безкоштовним програмним забезпеченням, що розповсюджується за умовами [GNU General Public License](https://www.r-project.org/COPYING). Код, написаний на `R` компілюється та запускається на різних платформах: UNIX, Windows, MacOS [@r-base].

## Завантаження та інсталяція R

Для завантаження актуальної версії `R` варто перейти на сайт проекту [https://cran.r-project.org/](https://cran.r-project.org/).

На сайті обираємо завантаження `R` для потрібної операційної системи. У межах курсу ми вокристовуємо `ОС Windows`, проте на синтаксис мови програмування та процес написання коду це не впливає: 

::: {#fig-rgui-1}

![](img/01/r_gui_1.png)

Завантаження R. Вибір ОС
:::

У наступному вікні клікаємо на **install R for the first time**:

::: {#fig-rgui-2}

![](img/01/r_gui_2.png)

Завантаження R. Перша інсталяція
:::

Далі обираємо **Download R 4.X.X for Windows**, де `4.X.X` версія `R`, яка може бути відмінною на момент вивчення курсу: 

::: {#fig-rgui-3}

![](img/01/r_gui_3.png)

Завантаження R. Завантаження версії для ОС
:::

Після завантаження файлу інсталяції потрібно його запустити. Зазвичай завантажений файл можна побачити у лівому нижному кутку браузера або у розділі "Завантаження" Вашого браузера. Наприклад, у браузері `Google Chrome` знайти цей пункт меню так:

::: {#fig-rgui-4}

![](img/01/chrome_download_button.png)

Завантаження R. Розділ \"Завантаження\" у `Google Chrome`
:::

## Перший запуск `R GUI`

За замовчуванням під час інсталяції `R` у ОС `Windows` пропонується шлях `C:\Program Files\R\R-4.X.X`. 

Для запуску `R GUI` (стандартного графічного інтерфейсу для роботи з `R`) потрібно зайти у папку `bin\x64` (або `i386`, якщо у Вас 32-х розрядна ОС) та запустити файл `Rgui.exe`.

Вигляд вікна `R GUI` зображено нижче:

::: {#fig-rgui-5}

![](img/01/r_gui_4.png)

Вигляд головного вікна `RGui`
:::

:::{.callout-note}
**GUI** (**G**raphical **U**ser **I**nterface) - набір візуальних компонентів для інтерактивної взаємодії користувача з програмним забезпеченням.
:::

У вікні `R Console` можна вводити команди/інструкції `R`, що будуть виконуватися:

Результати виконання команд зберігаються у памяті програми і можуть бути використані у наступних блоках коду:

::: {#fig-rgui-6}

![](img/01/r_gui_5.png)

Вигляд консолі для команд `RGui`
:::

Середовище `R GUI` має широкий спектр функцій і дозволяє написати будь-якого рівня складності проекти на R, проте він є лише базовою графічною обгорткою для `R`. Розглянемо інші зручніші середовища для написання `R`-коду.

## Поняття робочого простору

У процесі виконання коду створені об'єкти/змінні та функції зберігаються у поточній сесії. У `R` є можливість переглянути список збережних елментів, видалити усі або окремі, зберегти стан поточної сесії диск та завантажити його пізніше, щоб не проходти усі етапи виконання коду повторно _(інколи дуже складний код може виконувати досить довго і збереження проміжних результатів може бути хорошим рішенням)_.

Для прикладу створимо дві змінні `var1`, `var2` та виведемо на консоль їх значення: 

```{r}
var1 <- 10
var2 <- sqrt(15)
var1
var2
```


Для того аби переглянути список змінних у поточній сесії варто скористатися **`ls()`**:

```{r eval=T}
ls()
```

Якщо виникає потреба очистити робочий простір і звільними пам'ять використовується команда `rm()`. Так, щоб очистити усі змінні можна скористатися `rm(list = ls())`, якщо ж Ви хочете видалити якусь одну/дві змінних, то просто вкажіть імена:

```{r eval=T}
rm(list = c("var1"))
ls()
```

Таким чином, після виконання коду вище, залишиться лише змінна `var2`.

Зберігання образу (`image`) робочого простору на диск здійснюється за допомогою команди `save.image("шлях до файлу.RData")`, а його зчитування за допомогою `load("шлях до файлу.RData")`.

Код збереження даних:

```{r}
# Clear workspace
rm(list = ls())

# Declare variables
a <- 10
b <- a + 15

# Save image to file
save.image("tmp.RData")
```

Код читання та виведення даних:

```{r}
# Clear workspace
rm(list = ls())

# load image to file
load("tmp.RData")

print(a)
print(b)
```

У прикладі 2 не створюєть жодного параметра, проте вони збережні у файлі сесії.

Для того аби зберегти та зчитати окремий об'єкт, а не всі елементи сесії у `R` є спеціальний формат `.RDS`, який реалізовується методами `saveRDS(об'єкт, file="шлях_файлу.rds")` та `readRDS(file="шлях_файлу.rds")`.

## Поняття робочого каталогу 

Робота в будь-якому середовищі передбачає зв'язок із поточним каталогом, відносно якого будуються шляхи до файлів. Звичайно можна писати завжди повний шлях до файла, проте такий підхід є досить негнучким і під час перенесення коду між ПК створює чимало проблем розробникам.

Для визначення базового каталогу `R` в поточній сесії використовують команду `getwd()`. Якщо Ви користуєтеся `RStudio` та створили проєкт, то цей каталог буде відповідати повному шляху до папки  проєкту:

```{r}
getwd()
```

Для того аби змінити поточний робочий каталог використовують команду `setwd(шлях)`. Після запуску цієї команди функцій `getwd()` буде вказутивати уже на нову адресу/шлях.

:::{.callout-important}
Варто знати та вміти будувати **абсолютні** та **відносні** шляхи до каталогів та файлів, ці знання корисні для роботи з усіма мовами програмування та більшістю ПЗ для роботи з даними.
:::

Для запису шляху у ОС Windows можна скористатися 2-ма способами:

* `/` - **_слеш_**, записується як один знак;
* `\\` - **_бекслеш_**, записується як два знаки.

У прикладі нижче обидва шляхи ведуть до тієї ж папки (`drive` - буква диска):

```r
setwd("drive:/folder1/folder2/")
setwd("drive:\\folder1\\folder2\\")
```

Для перегляду інформації про наявні каталоги та файли у поточній робочій папці можна скористатися командою `dir()` або `list.files()`:

```{r}
dir()
list.files()
```

## Робота з `RStudio`

### Завантаження та інсталяція `RStudio Desktop`

**RStudio** - це інтегроване середовище розробки для `R`. Воно включає у себе консоль, підсвічування синтаксису (підказки), прямий запуск коду, інструменти для візуалізації графіків, html-коду, історію виконаних команд, відлагоджування коду, управління робочими просторами, підтримка різних видів розмітки та багато іншого. RStudio має версію з відкритим кодом та комерційну версію для `Windows`, `Linux` та `Mac`, а також веб-версію для серверів на Linux `RStudio Server` та `RStudio Server Pro` [@r-studio-site].

:::{.callout-note}
IDE (`integrated development environment`) - комплексне програмне рішення для розробки програмного забезпечення. Зазвичай, складається з редактора початкового коду, інструментів для автоматизації складання та відлагодження програм. Більшість сучасних середовищ розробки мають можливість автодоповнення коду. <a href="https://uk.wikipedia.org/wiki/%D0%86%D0%BD%D1%82%D0%B5%D0%B3%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B5_%D1%81%D0%B5%D1%80%D0%B5%D0%B4%D0%BE%D0%B2%D0%B8%D1%89%D0%B5_%D1%80%D0%BE%D0%B7%D1%80%D0%BE%D0%B1%D0%BA%D0%B8" target="_blank" >Wikipedia</a>
:::

Завантажити продукти можна з сайту `https://rstudio.com`. Щоб знайти середовище, яке ми будемо використовувати під час вивчення курсу варто виконати наступні кроки:

1. У головному меню сайту обрати `Products > RStudio`.
2. Знаходимо на сторінці кнопку для завантаження програми `RStudio Desktop` версії `Open Source` та натискаємо **DOWNLOAD RSTUDIO DESKTOP**:

::: {#fig-rgui-7}

![](img/01/rstudio_1.png)

Вибір версії `RStudio Desktop`
:::

3. Далі обираємо завантаження безкоштовної версії `RStudio Desktop` з наданого переліку:

::: {#fig-rgui-8}

![](img/01/rstudio_2.png)

Завантаження `RStudio Desktop`
:::

Після завантаження запускаємо інсталятор `RStudio`. Особливих кроків у цьому процесі немає.

Після запуску IDE RStudio зазвичай складається з 3-х або 4-х блоків:
* Файл, з яким працювали останнім (зліва зверху).
* Консоль для введення коду та виведення результатів (зліва знизу).
* Змінні середовища (`Environment`) (справа зверху) + Історія команд (`History`), Зєднання з зовнішніми ресурсами даних, наприклад, бази даних (`Connections`), навчальна інструкція (`Tutorial`).
* Файли каталогу або проекту (`Files`), Інстальовані пакети (`Packages`), Допомога (`Help`), Візуалізація результатів (`Plots`, `Viewer`).

::: {#fig-rgui-8}

![](img/01/rstudio_3.png)

Головне вікно `RStudio Desktop`
:::

Для першої демонстрації роботи виконаємо у консолі 2 рядки коду:

::: {#fig-rgui-9}

![](img/01/rstudio_4.png)

Приклад написання коду в `RStudio Desktop`
:::

Перший рядок з кодом `data <- c(3,7,1,6,3,4,5,4,2)` створює у пам'яті колекцію чисел. Зверніть увагу, що у блоці **Environments** відобраюаться усі змінні, що уснують у поточному робочому просторі (про це буде далі).

Другий рядок `plot(data, type="l")` дозволяє побудувати простий лінійний графік (`type="l" - linear, "p" - point`, `help(plot)` для деталей). Графіки, що "промальовуються" як картинки выдображаються у блоці **Plots**. Якщо ж графік має більш складну візуалізацію з інтерактивними елементами, що використовують уже засоби html/css/js, то він буде відображений у блоці **View**.

Якщо перемкнутися на вкладку **History**, то ми побачимо перелік раніше виконаних команд.

:::{.callout-note}
Для швидкого "гортання" уже виконаних раніше команд на консолі (_Console_) можна скористатися клавішами Up/Down на клавіатурі: <br>
![Arrow Keys](img/01/arrow_keys.png)
:::

### Створення першого проекту в RStudio 

На відміну від `R Gui` в `RStudio` реалізовано концепцію проектів, що дозволяє організувати код та поєднати різні його частини у межах певного рішення.

Створимо наш перший проект.

Для початку оберемо з верхнього меню пункт `File > New Project`. У вікні вибору способу створення проекту клікаємо `New Directory`. Такий спосіб передбачає, що жодного файлу проекту поки не існує або ми пізніше туди скопіюємо уже готовий код.

::: {#fig-rgui-10}

![](img/01/rstudio_6.png)

`RStudio Desktop`. Новий проєкт
:::

На наступному кроці обираємо `New Project`: 

::: {#fig-rgui-11}

![](img/01/rstudio_7.png)

`RStudio Desktop`. Новий проєкт. Тип проекту
:::

Після кліку на `Create Project` буде створено папку за попередньо обраним шляхом. Для запуску проєкту або швидкого перемикання між проектами можна скористатися як пунктами головного меню, так і підменю проектів справа. Також відкрити проект можна запуском файлу `*.Rproj` у провіднику `Windows`.

::: {#fig-rgui-12}

![](img/01/rstudio_8.png)

`RStudio Desktop`. Новий проєкт
:::

Щоб додати новий файл з кодом `R` потрібно обрати з головного меню `File > New file > R Script` або скористатися командою `Ctrl+Shift+N`. Новий файл буде створено з назвою `Untitled[X]`, тому рекомендую одразу його зберегти, наприклад, як `TestCode.R`

Для першого проекту розвяжемо наступну задачу:

> Написати програму, що генерує вектор з 20-ти випадкових чисел у межах [1;5], обчислює середнє та суму чисел, а також виводить гістограму частоти кожного значення (скільки разів дане число повторюється у векторі).

Код для генерації 20-ти випадкових чесел у діапазоні [1;5] матиме наступний вигляд:

```{r}
vtr <- sample(1:5, 20, replace=TRUE)
vtr
```

:::{.callout-important}
Результати виконання на Вашому ПК будуть іншими, адже **псевдо**генератор випадкових чисел буде брати іншу "точку відліку" для генерування чисел. Рекомендую перегляду функцію `set.seed(точка відліку - число)`.
:::

Обчислення та виведення на консоль інформації про суму та середнє значення:

```{r}
vtr_sum <- sum(vtr)
vtr_mean <- mean(vtr)

print(paste0("Sum: ", vtr_sum))
print(paste0("Mean: ", vtr_mean))
```

Виведемо гістограму:

```{r}
#| fig-cap: Приклад візуалізації гістрограми в R
hist(vtr, breaks = 5)
```

_Примітка. Детальніше про параметри функції `hist()` можна почитати тут:  [https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist](https://www.rdocumentation.org/packages/graphics/versions/3.6.2/topics/hist)_.

Орієнтовний вигляд вікна `RStudio` після викоання усіх описаних вище операцій матиме настпуний вигляд:

::: {#fig-rgui-13}

![](img/01/rstudio_10.png)

`RStudio Desktop`. Перегляд змінних
:::

Варто звернути увагу на виділений блок `Environment`, де можна переглянути усі доступні змінні, що є на даний момент у `пам'яті`. До цих параметрів можна звертатися у коді чи з консолі у будь, який момент. _Детальну інформацію про робоче середовище розглянуто нижче._

## Робота з `Jupyter Notebook`

Ноутбуки стали зручним та поширеним інструментом для аналізу даних, а також послідовного викладення матеріалів чи результатів дослідження. Перевагою такого інструменту є перемішування коду, результатів його виконання та іншого текстового наповнення, що дозволяє сформувати "на льоту" готові до читання документи.

Використання ноутбуків у навчальному процесі дозволяє описати не лише теоретичний матеріал, але приклади коду, що будуть виконувати безпосередньо під час ознайомлення з лекцією. Також слухач курсу може відредагувати наявний код та перевірити результати його виконання.

Розгялнемо процес інсталяції та запуску `Anaconda` (середовище з відкритим кодом для вирішення задач `Data Science`) та `Jupyter Notebook` на ПК.

Для встановлення середовища `Anaconda` потрібно перейти на сайт проекту та завантажити індивідуальну версію продукту: https://www.anaconda.com/products/individual [@anaconda-site].

_*Примітка. Усі операції у даному курсі виконуються під операційну систему `Windows 11 Education Edition`_.

Процес інсталяції середовища Anaconda не відрізняється від стандарного покрокового вставнолення програм у `Windows`.

Після запуску `Anaconda Navigator` для початку потрібно створити нове середовище та налаштувати роботу `R`: 

::: {#fig-conda-1}

![](img/01/anaconda_1.png)

`Anaconda Navigator`
:::

Для початку потрібно перейти на вкладку `Environments` та натиснути `Create`:

::: {#fig-conda-2}

![](img/01/anaconda_2.png)

Головне вікно `Anaconda Navigator`
:::

У вікні, що відкрилося потрібно відмітити `[x]` вставновлення інструментів для роботи з `R`:

::: {#fig-conda-3}

![](img/01/anaconda_3.png)

 Створення нового середовища на основі `R` у `Anaconda Navigator`
:::

Після встановлення R-інструментів оптрібно переключитися на вкладку `Home` та робочий простір:

::: {#fig-conda-4}

![](img/01/anaconda_4.png)

 Зміна середовища у `Anaconda Navigator`
:::

Після завантаження робочого простору оберіть `Launch` для запуску `Jupyter Notebook` з переліку встановлених засобів. `Jupyter Notebook` буде запущено у браузері за замовчеванням Вашого ПК. Відкрити ноутбук можна обравши потрібний файл, а створити новий у меню справа `New` > `Notebook` > `R`:


::: {#fig-conda-6}

![](img/01/anaconda_6.png)

Створення нового `Jupyter Notebook`
:::

## Огляд додаткових IDE та сервісів для роботи з R 

Окрім середовищ описаних вище існує ряд досить цікавих інструментів, що роблять досить зручною роботу з `R`-кодом. Розглянемо ці інструменти.

**Visual Studio Code** - безкоштовний редактор коду від `Microsoft`, орієнтовний на велику кількість мов програмування та фреймворків [@vs-code]. Серед інших іструментів у VS Code доступні також розширення для роботи з `R`:

::: {#fig-conda-6}

![](img/01/vs_code.png)

Вікно середовища Visual Studio Code
:::

**Visual Studio Community Edition** - безкоштовне середовище розробки від компаній Microsoft. VS створено з самого початку для розробки під платформу .NET та мови програмування C#, VB.NET, F# тощо, але з часом отримало багато розширень, що дозволяють у тому числі, працювати і з проектами в `R` [@visual-studio].

**Google Collab** - онлайн сервіс для роботи з ноутбуками для `Data Science` від компанії `Google` [@google-collab]:

::: {#fig-collab}

![](img/01/google_collab.png)

Вікно середовища Google Collab
:::

_Примітка. Код у прикладі вище написаний на `Python`._

[**kaggle.com**](https://kaggle.com) - сервіс для змагань з `Data Science` та `Machine Learning`. Окрім переліку змагань, наборів даних сервіс має досить зручні ноутбуки.

::: {#fig-kaggle}

![](img/01/kaggle.png)

kaggle.com
:::

Загалом сервісів та середовищ для розробки в `R` існує досить багато і їх кількість зростає, але це не впливає на принципи написання коду та роботу з даними.

