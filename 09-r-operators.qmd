---
title: "Оператори"
author: "Юрій Клебан"
date: "`r Sys.Date()`"
format:
  html:
    toc: true
    highlight-style: github
    code-line-numbers: true
language: _language-ua.yml 
---
## Арифметичні оператори 

`R` можна використовувати як звичайни калькулятор. 

Розглянемо набір звичних арифметичних операторів, що відомі з початкової школи:

- Додавання: `+`.
- Віднімання: `-`.
- Ділення: `/`.
- Множення: `*`.

А також більш складні оператори:

- Піднесення до степеня: `^` (вводиться з клавіатури як `Shift+6` на ENG-розкладці клавіатури).
- Остача від ділення (ще може називатися "ділення по модулю"): `%%` (вводиться з клавіатури як `Shift+5`).
- Ділення націло: `%/%`.

Розглянемо приклад **додавання** чисел:

```{r eval=T}
5 + 10
```

```{r eval=T}
5 + 4 + 15
5 + 53 + 343
```

```{r eval=T}
(5 + 8) + (4 + 9)
```

:::{.callout-note}
_Примітка_. Використання "круглих" дужок у прогрмуванні виразах має пріоритет аналогічний до загальноприйнятих у математиці.
:::

Розглянемо приклад **віднімання** чисел:

```{r eval=T}
47 - 21
```

```{r eval=T}
15 - (10 - 25)
```

:::{.callout-note}
_Примітка_. Заміна знаків до/в "дужках" тут працює так само як працювала у  школі :)
:::

Приклади **множення** чисел:

```{r eval=T}
5 * 3
```

```{r eval=T}
5 * (2 + 5)
```

Приклади **ділення** чисел:

```{r eval=T}
12 / 2
```

```{r eval=T}
(4 + 7) / 3
```

**Піднесення до степеня** за допомогю оператора `^` є досить простим. Так, наприклад, `3^2` дорівнює 9, а `2^3` -  це `2*2*2` і дорівнює 8.  

```{r eval=T}
5^2
```

```{r eval=T}
(1+3)^3 + 100 
```

**Остача від ділення** дозволяє знайти залишок одного числа від ділення на інше число. 

Наприклад, остача від ділення націло 5 на 2 дорівнює 1, бо `2 * 2 (=4) + 1 = 5`

```{r eval=T}
28 %% 7
```

```{r eval=T}
17 %% 5
```
_Примітка._ Пробіли між цифрами та операторами можна не лишати, це робиться для зручності візуального сприйняття коду.

**Ділння націло** залишає лише цілу частину від ідленнядвох чисел:

```{r eval=T}
28 %/% 7
```

---

## Оператори відношення

**Оператори відношення** відповідають за порівнняння двох об'єктів між собою та повертають значення логічного типу `TRUE`, якщо результат істинний та `FALSE`, якщо результат хибний.

Перелік операторів відношення:

* Більше або дорівнює `>=`.
* Менше `<`.
* Менше або дорівнює `<=`.
* Дорівнює `==`.
* Не дорівнює `!=` 

Для демонстрації принципів роботи операторів відношення оголосимо 3 змінні `a`, `b` та `c`.

```{r eval=T}
a <- 12
b <- 5
c <- 7
```

Розгялнемо кілька прикладів використання описаних вище операторів.

Оператори, що відповідають за первірку на "більше/менше": 

```{r eval=T}
a > b
b + c < a
b + c <= a
```

Оператори, що відповідають за перевірку на "рівність/нерівність":

```{r}
a != b
a == b + c
b == c
```

## Логічні оператори {#chapter233}

До логічних операторів у `R` відносяться:

* І `&` (амперсант, `Shift-7`) - виконання усіх умов одночасно.
* АБО `|` (вертикальна риска, `Shift+\`) - виконання однієї із умов.
* НЕ `!` (знак оклику, `Shift+1`) - заперечення.

Важливо розуміти відмінності між цими операторами вміти використовувати результи їх роботи. Для початку варто розглянути таблицю істинності:

| A | B | Оператор **І** | Оператор **АБО** | Заперечення A (**не A**)|
|:---:|:---:|:-------:|:------:|:-------:|
|FALSE|FALSE|FALSE|FALSE|TRUE|
|FALSE|TRUE|FALSE|TRUE|TRUE|
|TRUE|FALSE|FALSE|TRUE|FALSE|
|TRUE|TRUE|TRUE|TRUE|FALSE|

: Таблиця істинності логічних операторів

Приклади використання логічних операторів зображені нижче.

Оператор **І** (`and`):

```{r}

```{r}
a <- 12
b <- 7

a > 10 & b < 10
a > 10 & b > 10
a < 10 & b < 10
a < 10 & b > 10
```

Оператор **АБО** (`or`):

```{r}
a > 10 & b < 10
a > 10 | b > 10
a < 10 | b < 10
```

---

## Завдання {.unnumbered}

### Завдання 1 {.unnumbered}

Яким буде результат виконання наступних команд?

```{r}
a <- 10
b <- 4

a %% b > 0 # what is result 
```

Результат:
```output
TRUE
```

Пояснення: $a$ %% $b = 2$, бо остача від ділення $10$ на $4$ рівна $2$, а $2 > 0 = true$.

### Завдання 2 {.unnumbered}

Яким буде результат виконання наступних команд?

Підзавдання 1:

```{r}
#| eval=FALSE
a <- 7
b <- 12
c <- a - b %% 2

c
```
Результат:

```output
7
```

Підзавдання 2:

```{r}
#| eval=FALSE
c > 0 & b > a
```

Результат:

```output
TRUE
```

Підзавдання 3:

```{r}
#| eval=FALSE
c < 0 | b > a
```

Результат:

```output
TRUE
```